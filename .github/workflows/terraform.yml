name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:1.3.7
    env:
      TERRAFORMRC_URL: https://github.com/shishifubing-com/misc-personal-dotfiles/raw/main/configs/.terraformrc.hcl
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_TOKEN_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_TOKEN_KEY}}
      GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .terraformrc
        run: |
          echo "
            provider_installation {
              network_mirror {
                url = "https://terraform-mirror.yandexcloud.net/"
                include = ["registry.terraform.io/*/*"]
              }
              direct { exclude = ["registry.terraform.io/*/*"] }
            }
          " >"${HOME}/.terraformrc"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init -reconfigure -backend-config="./main.s3.tfbackend"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
              #### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization \`${{ steps.init.outcome }}\`
              #### Terraform Validation \`${{ steps.validate.outcome }}\`
              #### Terraform Plan \`${{ steps.plan.outcome }}\`

              <details><summary>Show Plan</summary>

              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`

              </details>

              *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
